generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id           String      @id @default(cuid())
  email        String      @unique
  createdAt    DateTime    @default(now())
  role         UserRole?
  activeStatus Boolean     @default(true)
  password     String
  competitorId String?     @unique
  competitor   competitor?
}

model competitor {
  id        String      @id @default(cuid())
  fullName  String
  contactNo String
  userId    String      @unique
  teamId    String?     
  isLeader  Boolean     @default(false)
  team      teams?      @relation(fields: [teamId], references: [id])
  user      UserProfile @relation(fields: [userId], references: [id]) 
}

model teams {
  id          String        @id @default(cuid())
  name        String        @unique
  points      Int           @default(0)
  isActive    Boolean       @default(true)
  submissions submissions[]
  competitors competitor[]
}
model Admin {
  id        String    @id @default(cuid())
  username  String    @unique
  email     String    @unique
  password  String
  fullName  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  isActive  Boolean   @default(true)
  lastLogin DateTime?
}

model challenges {
  id                 String        @id @default(cuid())
  title              String
  description        String
  order              Int           @unique
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  algorithmicProblem String
  buildathonProblem  String?
  flag               String
  points             Int           @default(100)
  submissions        submissions[]
  testCases          TestCase[]
}



model TestCase {
  id          String   @id @default(uuid())
  challengeId String
  input       String
  expected    String
  isPublic    Boolean   @default(false) 
  challenge   challenges @relation(fields: [challengeId], references: [id])
}

model submissions {
  id            String           @id @default(cuid())
  teamId        String
  challengeId   String
  content       String?
  isCorrect     Boolean          @default(false)
  points        Int              @default(0)
  submittedAt   DateTime         @default(now())
  executionTime Int?
  flagSubmitted String?
  githubLink    String?
  output        String?
  status        SubmissionStatus              @default(PENDING)
  type          SubmissionType
  challenges    challenges       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  teams         teams            @relation(fields: [teamId], references: [id], onDelete: Cascade)
}



enum UserRole {
  ADMIN
  COMPETITOR
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SubmissionType {
  ALGORITHMIC
  BUILDATHON
}
